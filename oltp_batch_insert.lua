#!/usr/bin/env sysbench
-- Copyright (C) 2006-2017 Alexey Kopytov <akopytov@gmail.com>

-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

-- ----------------------------------------------------------------------
-- Insert-Only OLTP benchmark
-- ----------------------------------------------------------------------

require("oltp_common")

sysbench.cmdline.commands.prepare = {
   function ()
      if (not sysbench.opt.auto_inc) then
         -- Create empty tables on prepare when --auto-inc is off, since IDs
         -- generated on prepare may collide later with values generated by
         -- sysbench.rand.unique()
         sysbench.opt.table_size=0
      end

      cmd_prepare()
   end,
   sysbench.cmdline.PARALLEL_COMMAND
}

function prepare_statements()
   -- We do not use prepared statements here, but oltp_common.sh expects this
   -- function to be defined
end

-- 该方法不支持 pgsql
function event()
--   print("执行 oltp_batch_insert2")
   local table_name = "sbtest" .. sysbench.rand.uniform(1, sysbench.opt.tables)
	-- insert 头
	local insert_sql =string.format("INSERT INTO %s (id, k, c, pad) VALUES ",table_name )


   for i=1,200,1
   do
         -- Convert a uint32_t value to SQL INT
        local j = sysbench.rand.unique() - 2147483648

   	local k_val = sysbench.rand.default(1, sysbench.opt.table_size)
   	local c_val = get_c_value()
   	local pad_val = get_pad_value()
	local insert_value = string.format("(%d, %d, '%s', '%s'),", j, k_val, c_val, pad_val)
		
	insert_sql = insert_sql .. insert_value
   end
		
	size = #insert_sql
	insert_sql = string.sub(insert_sql,0,size-1)

--	print("插入语句：" .. insert_sql)

     	con:query(insert_sql)
end
